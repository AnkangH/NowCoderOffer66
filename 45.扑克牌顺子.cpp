/*
题目：
LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)...他随机从中抽出了5张牌,
想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”
不是顺子.....LL不高兴了,他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。
上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 
现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，
否则就输出false。为了方便起见,你可以认为大小王是0。
解析：
给定一个5个元素的数组，数组的元素大小为0-13；并且0最多有两个，1-13最多有4个。
0可以作为1-13的任意一个数字。判断数组元素是否连续。
将数组从小到大排序。记录0的个数，记录每个元素与相邻元素的差值。
根据0的个数和数组元素的差值。如果两个元素之差不为1，说明不连续
这时有两种情况，其一是元素有重复，因为不能删除牌，所以肯定不是顺子。
其二是元素不连续，记录所有不连续差值大小的和，如果差值大小的和<=0的个数，说明可以组成顺子。否则不可以。
如0 1 2 4 5.
1 2 4 5中 2-1-1=0，说明2和1连续，5-4-1=0，说明5和4连续。
只有4-2-1的差不为0，为1,说明需要一个0来填补2和4之间的不连续 可以组成顺子
0 0 1 4 5
同理。1 4 5中只有4-1-1=2不为0，说明需要两个0来填补1和4之间的不连续。可以组成顺子。
*/
class Solution {
public:
    bool IsContinuous( vector<int> numbers ) {
        if(numbers.empty())
            return false;
        int size=numbers.size();
        int zero=0;//保存0个数的变量
        for(int i=0;i<size;i++)
            if(numbers[i]==0)
                zero++;//记录0的个数
        sort(numbers.begin(),numbers.end());//从小到大排序
        for(int i=1;i<size;i++)
        {
            if(numbers[i]!=0&&numbers[i-1]!=0)//0不参与连续判断
            {
            int dec=numbers[i]-numbers[i-1]-1;
            if(dec==0)
                continue;//差值为0 说明牌连续
            else if(dec>0)
                zero-=dec;//说明牌不连续 不连续的牌用0填充中间值
            else
                return false;//说明有相同的牌 此时肯定不能组成顺子 因为不能删除牌
            }
        }
        return zero>=0? true:false;//只要万能牌个数>=不连续数即为true 否则false
    }
};
