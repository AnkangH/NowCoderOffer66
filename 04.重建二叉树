/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
        if(vin.size()==0)
            return NULL;//递归退出条件
        vector<int> pre_left,pre_right,vin_left,vin_right;
        int n=0;
        TreeNode* t=new TreeNode(pre[0]);
        for(int i=0;i<vin.size();i++)
            if(vin[i]==pre[0])
            {
                n=i;
                break;
            }
        for(int i=0;i<n;i++)
        {
            vin_left.push_back(vin[i]);
            pre_left.push_back(pre[i+1]);
        }
        for(int i=n+1;i<vin.size();i++)
        {
            vin_right.push_back(vin[i]);
            pre_right.push_back(pre[i]);
        }
        t->left=reConstructBinaryTree(pre_left,vin_left);
        t->right=reConstructBinaryTree(pre_right,vin_right);
        return t;
    }
};
